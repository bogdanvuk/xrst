/*
 * generated by Xtext
 */
package rs.demsys.rst.parser.antlr;

import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.parser.antlr.AbstractIndentationTokenSource;
import org.eclipse.xtext.parser.antlr.ITokenAcceptor;

import rs.demsys.rst.parser.antlr.internal.InternalRstParser;

public class RstTokenSource extends AbstractIndentationTokenSource {
	
	public RstTokenSource(TokenSource delegate) {
		super(delegate);
	}
	
	@Override
	protected boolean shouldSplitTokenImpl(Token token) {
		// TODO Review assumption
		return token.getType() == InternalRstParser.RULE_NL;
	}

	@Override
	protected int getBeginTokenType() {
		// TODO Review assumption
		return InternalRstParser.RULE_BEGIN;
	}

	@Override
	protected int getEndTokenType() {
		// TODO Review assumption
		return InternalRstParser.RULE_END;
	}
	
	private void splitIntoBeginToken(Token token, int indentation, ITokenAcceptor result) {
		result.accept(token);
		indentationStack.push(indentation);
		currentIndentation = indentation;
		result.accept(createBeginToken(((CommonToken) token).getStopIndex() + 1));
	}
	
	@Override
	protected void doSplitToken(Token token, ITokenAcceptor result) {
		if (token.getType() == Token.EOF) {
			if (shouldEmitPendingEndTokens()) {
				while(indentationStack.size() > 1) {
					indentationStack.pop();
					result.accept(token);
					result.accept(createEndToken(nextOffset));
				}
			}
			result.accept(token);
			return;
		}
		doSplitTokenImpl(token, result);
	}
	
	/**
	 * The token was previously determined as potentially to-be-splitted.
	 */
	@Override
	protected void doSplitTokenImpl(Token token, ITokenAcceptor result) {
		String text = token.getText();
		int indentation = computeIndentation(text);
		if (indentation == -1 || indentation == currentIndentation) {
			result.accept(token);
		} else if (indentation > currentIndentation) {
			splitIntoBeginToken(token, indentation, result);
		} else if (indentation < currentIndentation) {
			boolean newLinePlaced = false;
			
			while(indentation < currentIndentation) {
				indentationStack.pop();
				currentIndentation = indentationStack.peek();
				if (!newLinePlaced) {
					result.accept(token);
					newLinePlaced = true;
				}
				result.accept(createEndToken(nextOffset));
			}
			if (indentation > currentIndentation) {
				splitIntoBeginToken(token, indentation, result);
				return;
			}
		} else {
			throw new IllegalStateException(String.valueOf(indentation));
		}
	}
}
